package hacker.rank.ventureDive;

import java.util.Arrays;
import java.util.Collections;
import java.util.List;

public class CountDivisiblePairs {

    public static void main(String[] args) {

        List<Integer> arr = Arrays.asList(1,3,5,7);
        List<Integer> arr2 = Arrays.asList(1,13,4,7,16,10);
        List<Integer> arr3 = Arrays.asList(9028, 6025, 1357, 3313, 716, 3684, 3041, 3863, 4368, 2474, 5804, 5401, 52, 6441, 7670, 3294, 4550, 1236, 7887, 6142, 3372, 5554, 8658, 3429, 7301, 8, 6273, 5842, 6320, 149, 637, 8247, 4647, 7351, 7859, 9287, 5339, 1105, 5281, 5664, 7061, 5452, 4648, 31, 2060, 254, 2462, 5377, 8647, 6591, 7775, 3358, 1550, 5294, 4569, 9081, 9218, 2199, 326, 4986, 9829, 412, 7813, 1047, 9499, 3042, 4782, 2022, 8620, 3916, 680, 4837, 6675, 8215, 4872, 8823, 8379, 7926, 7656, 685, 4751, 453, 1884, 5673, 7496, 2390, 5233, 3955, 9063, 8031, 1305, 405, 4908, 8445, 6073, 3479, 2348, 5109, 7344, 639, 5081, 1416, 9758, 1208, 8446, 2629, 8831, 875, 9327, 2640, 8772, 3325, 5312, 3244, 3384, 8162, 6256, 8093, 2011, 9027, 7125, 5736, 800, 9893, 2709, 6281, 7203, 2425, 1841, 2004, 2619, 9180, 7860, 9474, 6574, 456, 8100, 9232, 1153, 732, 4195, 2196, 3878, 2568, 4258, 4551, 6224, 4995, 8, 1099, 1492, 2386, 5150, 2924, 3209, 561, 4944, 683, 1815, 2714, 9789, 5100, 461, 8642, 2144, 5629, 6365, 5113, 7620, 1753, 7082, 2902, 3262, 6996, 4274, 7814, 5933, 8969, 5166, 3408, 1409, 3810, 506, 8577, 3515, 3381, 5296, 6952, 4847, 3237, 1735, 2760, 1445, 7983, 236, 4323, 9558, 7382, 5410, 8269, 489, 7735, 6432, 7959, 2274, 3070, 5885, 1889, 2919, 8768, 6764, 371, 7460, 2024, 5851, 6445, 9235, 1756, 8631, 9205, 3653, 3345, 4357, 1303, 7103, 170, 2644, 4172, 7859, 2406, 6760, 3113, 9738, 2888, 9367, 1224, 1743, 9487, 3383, 4434, 6648, 9873, 768, 8516, 5656, 8601, 2982, 7678, 8411, 298, 139, 1369, 213, 4616, 9486, 9205, 1063, 4899, 5318, 3795, 558, 9970, 2608, 9883, 5276, 3220, 6615, 993, 680, 6496, 3028, 5907, 8794, 8346, 1719, 9071, 9498, 9630, 2180, 3887, 184, 735, 5822, 3731, 4879, 2550, 8513, 3007, 5793, 8573, 6508, 4647, 9172, 2134, 8796, 9215, 2567, 4697, 1838, 7178, 5786, 7824, 2475, 1264, 6083, 5883, 3747, 8581, 2091, 6924, 7296, 7139, 724, 3935, 3519, 1841, 2011, 9829, 5444, 964, 98, 5950, 9683, 4617, 7720, 8978, 8600, 505, 1722, 4064, 4608, 1006, 7854, 6204, 6651, 3582, 2055, 1214, 7934, 6952, 9517, 8985, 8208, 766, 403, 7948, 2328, 4496, 3098, 6015, 4764, 1178, 5381, 1728, 6233, 5380, 4785, 765, 4794, 5965, 32, 7353, 2017, 3715, 3293, 8197, 146, 6844, 4133, 819, 8837, 8128, 4203, 4541, 5926, 4607, 8637, 371, 2113, 9202, 2114, 5973, 325, 8947, 5570, 7077, 6066, 1743, 2404, 4210, 5126, 2726, 5090, 1131, 580, 2141, 5788, 666, 9919, 8330, 4219, 3586, 4125, 5648, 3190, 5510, 849, 4848, 272, 3004, 1704, 184, 6065, 1602, 7470, 1899, 4792, 4415, 7965, 535, 2219, 1990, 5365, 663, 8349, 6060, 8487, 4753, 6898, 3827, 8010, 1132, 926, 5594, 6381, 5738, 6447, 4167, 4008, 8279, 1809, 8054, 2914, 8682, 4431, 3341, 5487, 6733, 1267, 4649, 3109, 6536, 4036, 4656, 4569, 3932, 7256, 9725, 4076, 9054, 5179, 2802, 9315, 9938, 1516, 4986, 5209, 496, 9275, 3575, 5682, 1600, 312, 1047, 2983, 4724, 2985, 3304, 3109, 4805, 1531, 9298, 7055, 570, 7818, 3658, 27, 8096, 4666, 758, 3940, 8537, 6531, 5247, 7806, 3062, 1515, 4613, 4087, 8147);

        int k = 1;
        int x = 3;
        System.out.println(countDivisiblePairs(arr2, k, x));

    }

    // NOTE: not worked properly as it got passed only 7 out of around 17 test cases
    public static long countDivisiblePairs(List<Integer> arr, int k, int x) {
        // Write your code here

        long res = 0;
        //Collections.sort(arr);
        int n = arr.size();

        for(int i = 0; i < n - 1; i++) {
            for(int j = i+1 ; j < n; j++) {
                if(getDivisibleCount(Math.min(arr.get(i), arr.get(j)), Math.max(arr.get(i), arr.get(j)), x) == k)
                    res++;
            }
        }

        return res;
    }

    private static long getDivisibleCount(int start, int end, int x) {

        long count = 0;
        boolean isFound = false;

        while (start <= end) {

            if(start%x == 0) {
                count++;
                isFound = true;
            }

            if(isFound)
                start += x;
            else
                start++;
        }

        return count;
    }



}
